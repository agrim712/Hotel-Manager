generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role
  hotel     Hotel?   @relation(fields: [hotelId], references: [id])
  hotelId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hotel {
  id             String        @id @default(cuid())
  name           String
  address        String        @unique
  country        String?
  city           String?
  contactPerson  String?
  phoneCode      String?
  phoneNumber    String?
  whatsappNumber String?
  totalRooms     Int?
  email          String?
  propertyType   String?
  currency       String?
  products       String[]
  rooms          Room[]
  users          User[]
  reservations   Reservation[]
  isPaymentDone  Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Room {
  id             String     @id @default(cuid())
  name           String
  numOfRooms     Int
  maxGuests      Int
  rateType       String
  rate           Float
  extraAdultRate Float?
  roomNumbers    String[]
  hotelId        String
  hotel          Hotel      @relation(fields: [hotelId], references: [id])
  roomUnits      RoomUnit[]
  reservations   Reservation[] @relation("RoomToReservation")
}

model RoomUnit {
  id           String        @id @default(cuid())
  roomNumber   String
  status       RoomStatus    @default(AVAILABLE)
  notes        String?
  floor        Int?
  roomId       String
  room         Room          @relation(fields: [roomId], references: [id])
  reservations Reservation[]
}

model Reservation {
  id              String    @id @default(uuid())
  checkIn         DateTime
  checkOut        DateTime
  nights          Int
  roomType        String
  rateType        String
  guests          Int
  rooms           Int
  bookedBy        String
  businessSegment String
  billTo          String
  paymentMode     String
  perDayRate      Float
  perDayTax       Float
  taxInclusive    Boolean
  totalAmount     Float?
  roomNo          String
  guestName       String
  email           String
  phone           String
  dob             DateTime?
  gender          String
  specialRequest  String?
  address         String
  city            String
  state           String
  zip             String
  country         String
  identity        String
  idDetail        String
  idProof         String?
  photoIdPath     String?
  hotelId         String
  hotel           Hotel     @relation(fields: [hotelId], references: [id])
  roomUnitId      String?
  roomUnit        RoomUnit? @relation(fields: [roomUnitId], references: [id])
  connectedRooms  Room[]    @relation("RoomToReservation")
  createdAt       DateTime  @default(now())
  isMaintenance   Boolean   @default(false)
}

model R_Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  items       R_Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model R_Item {
  id          Int        @id @default(autoincrement())
  name        String
  price       Float
  description String?
  spiceLevel  String     @default("Mild")
  allergens   String[]
  vegetarian  Boolean    @default(false)
  available   Boolean    @default(true)
  prepTime    Int        @default(15)
  category    R_Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, categoryId])
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  MAINTENANCE
}

enum Role {
  SUPERADMIN
  HOTELADMIN
}