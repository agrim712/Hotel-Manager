generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PropertyFiles {
  id        Int      @id @default(autoincrement())
  altText   String? // Optional text for accessibility
  hotelId   String // Foreign key to link to the Hotel
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  createdAt DateTime @default(now())
  url       String
  fileType  String
}

// Room-level images
model RoomImage {
  id        Int      @id @default(autoincrement())
  altText   String? // Optional text for accessibility
  hotelId   String // Foreign key to link to the Hotel
  createdAt DateTime @default(now())
  roomId    String?
  room      Room?    @relation(fields: [roomId], references: [id])
  url       String
}

model Hotel {
  id                 String  @id @default(cuid())
  // Basic Information
  name               String
  brandAffiliation   String?
  category           String  @default("3-Star")
  registeredAddress  String
  operationalAddress String?

  // Location Information
  country           Json? // { value: string, label: string }
  state             String?
  city              Json? // { value: string, label: string }
  pinCode           String
  timeZone          Json? // { value: string, label: string }
  preferredLanguage Json? // { value: string, label: string }

  // Amenities
  amenities Json? // Array<{ value: string, label: string }>

  // Contact Information
  contactPerson  String
  phoneCode      Json? // { value: string, label: string }
  phoneNumber    String
  whatsappNumber String?
  email          String  @unique
  website        String?
  googleMapsLink String?

  // Property Details
  totalRooms   Int
  propertyType String?
  currency     Json? // { value: string, label: string }

  // Government & Tax Details
  panNumber           String
  gstin               String?
  fssaiLicense        String?
  fireSafetyCert      String?
  tradeLicense        String?
  alcoholLicense      String?
  tourismRegistration String?
  companyRegistration String?

  // Operations
  checkInTime        String
  checkOutTime       String
  earlyCheckInPolicy String?
  lateCheckOutPolicy String?
  cancellationPolicy String
  noShowPolicy       String?

  // Accounting
  invoiceFormat String?
  paymentModes  Json? // string[]

  // OTA
  otas           Json? // string[]
  channelManager String?
  bookingEngine  String?

  // Products
  products Json? // Array<{ value: string, label: string }>

  // Documents
  logoPath            String?
  panCardPath         String?
  gstCertPath         String?
  tradeLicensePath    String?
  fireSafetyCertPath  String?
  fssaiLicensePath    String?
  cancelledChequePath String?
  idProofPath         String?

  propertyFiles         PropertyFiles[] // <-- NEW RELATION to PropertyImage model
  bankAccounts          BankAccount[]
  rooms                 Room[]
  users                 User[]
  isPaymentDone         Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Reservation           Reservation[]
  RoomUnit              RoomUnit[]
  expenses              Expense[]
  expenseCategories     ExpenseCategory[]
  StaffUser             StaffUser[]
  equipments            Equipment[]
  technicians           Technician[]
  tickets               Ticket[]
  maintenanceHistories  MaintenanceHistory[]
  preventiveSchedules   PreventiveSchedule[]
  EnergyConsumption     EnergyConsumption[]
  Lead                  Lead[]
  Quotation             Quotation[]
  customers             Customer[]
  tables                Table[]
  areas                 Area[]
  waiters               Waiter[]
  orders                Order[]
  inventoryItems        InventoryItem[]
  suppliers             Supplier[]
  reports               Report[]
  notifications         Notification[]
  devices               Device[]
  onlineOrders          OnlineOrder[]
  feedbacks             Feedback[]
  menuCategories        MenuCategory[]
  menuItems             MenuItem[]
  menuModifiers         MenuModifier[]
  comboItems            ComboItem[]
  kitchenOrders         KitchenOrder[]
  orderSplits           OrderSplit[]
  coupons               Coupon[]
  inventoryTransactions InventoryTransaction[]
  purchaseOrders        PurchaseOrder[]
  kitchenDisplays       KitchenDisplay[]
  queueEntries          QueueEntry[]
  thirdPartyOrders      ThirdPartyOrder[]
  taxConfigurations     TaxConfiguration[]
  receiptTemplates      ReceiptTemplate[]
  RoomDailyRate         RoomDailyRate[]
  recipes  Recipe[]
  outlets  Outlet[]
}

model BankAccount {
  id                String   @id @default(cuid())
  accountHolderName String
  bankName          String
  accountNumber     String
  ifscCode          String
  accountType       String
  branch            String
  isPrimary         Boolean  @default(true)
  hotelId           String
  hotel             Hotel    @relation(fields: [hotelId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model RoomUnit {
  id             String         @id @default(cuid())
  roomNumber     String
  floor          String?
  roomId         String
  room           Room           @relation(fields: [roomId], references: [id])
  hotelId        String
  hotel          Hotel          @relation(fields: [hotelId], references: [id])

  // ðŸ“… Reference start date for the dailyStatus array (e.g., "2025-04-01")
  startDate      DateTime

  // ðŸ“Š Availability status from startDate onward
  dailyStatus    String[]       @default([])

  cleaningStatus CleaningStatus @default(CLEANED)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  Reservation    Reservation[]

  @@unique([roomId, roomNumber], name: "roomunit_unique_per_room")
}



model Reservation {
  id              String    @id @default(uuid())
  checkIn         DateTime
  checkOut        DateTime
  nights          Int
  roomType        String
  rateType        String
  guests          Int
  rooms           Int
  bookedBy        String
  businessSegment String
  billTo          String
  paymentMode     String
  perDayRate      Float
  perDayTax       Float
  taxInclusive    Boolean
  totalAmount     Float?
  roomNo          String
  guestName       String
  email           String
  phone           String
  dob             DateTime?
  gender          String
  specialRequest  String?
  address         String
  city            String
  state           String
  zip             String
  customerId      String?
  customer        Customer? @relation(fields: [customerId], references: [id])
  country         String
  identity        String
  idDetail        String
  idProof         String?
  photoIdPath     String?
  hotelId         String
  hotel           Hotel     @relation(fields: [hotelId], references: [id])
  roomUnitId      String?
  roomUnit        RoomUnit? @relation(fields: [roomUnitId], references: [id])
  connectedRooms  Room[]    @relation("RoomToReservation")
  createdAt       DateTime  @default(now())
  isMaintenance   Boolean   @default(false)
  Room            Room[]
}

model Room {
  id             String          @id @default(cuid())
  name           String
  numOfRooms     Int
  maxGuests      Int
  rateType       String // { value: string, label: string }
  rate           Float
  extraAdultRate Float?
  roomNumbers    String[] // Array of "floor-roomnumber" strings
  amenities      Json? // Array<{ value: string, label: string }>
  smoking        String          @default("non-smoking")
  extraBedPolicy String?
  childPolicy    String?
  RoomImages     RoomImage[]
  petPolicy      String          @default("Not Allowed")
  hotelId        String
  hotel          Hotel           @relation(fields: [hotelId], references: [id])
  reservations   Reservation[]   @relation("RoomToReservation")
  Reservation    Reservation?    @relation(fields: [reservationId], references: [id])
  reservationId  String?
  equipments     Equipment[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  RoomUnit       RoomUnit[]
  dailyRates     RoomDailyRate[]
}

model RoomDailyRate {
  id        String    @id @default(cuid())
  roomId    String // REQUIRED
  room      Room      @relation(fields: [roomId], references: [id])
  hotelId   String
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
  roomType  String
  rateType  String
  yearStart DateTime
  prices    Decimal[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([roomId, rateType, yearStart], name: "room_rate_year_unique")
}

model Equipment {
  id           Int                  @id @default(autoincrement())
  name         String
  hotelId      String
  hotel        Hotel                @relation(fields: [hotelId], references: [id])
  roomId       String? // FIX: Room.id is String, so roomId must match
  room         Room?                @relation(fields: [roomId], references: [id])
  serialNumber String?              @unique
  model        String?
  purchaseDate DateTime?
  amcs         PreventiveSchedule[]
  histories    MaintenanceHistory[]
  tickets      Ticket[] // back relation to Ticket
  createdAt    DateTime             @default(now())
}

model Technician {
  id        Int      @id @default(autoincrement())
  name      String
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  phone     String?
  email     String?  @unique
  skillset  String?
  tickets   Ticket[]
  createdAt DateTime @default(now())
}

model Ticket {
  id                 Int                  @id @default(autoincrement())
  title              String
  room               String? // âœ… store room text directly
  issueType          String
  priority           String
  description        String?
  status             String               @default("open")
  hotelId            String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Hotel              Hotel                @relation(fields: [hotelId], references: [id])
  Equipment          Equipment?           @relation(fields: [equipmentId], references: [id])
  equipmentId        Int?
  Technician         Technician?          @relation(fields: [technicianId], references: [id])
  technicianId       Int?
  MaintenanceHistory MaintenanceHistory[]
}

model MaintenanceHistory {
  id          Int        @id @default(autoincrement())
  hotelId     String
  hotel       Hotel      @relation(fields: [hotelId], references: [id])
  ticketId    Int?
  ticket      Ticket?    @relation(fields: [ticketId], references: [id])
  equipmentId Int?
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  action      String
  fromValue   String?
  toValue     String?
  note        String?
  createdAt   DateTime   @default(now())
}

model PreventiveSchedule {
  id          Int       @id @default(autoincrement())
  hotelId     String
  hotel       Hotel     @relation(fields: [hotelId], references: [id])
  equipmentId Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  frequency   Frequency
  lastDoneAt  DateTime?
  nextDueAt   DateTime?
  isActive    Boolean   @default(true)
  notes       String?
  createdAt   DateTime  @default(now())
}

model EnergyConsumption {
  id             Int      @id @default(autoincrement())
  hotelId        String
  hotel          Hotel    @relation(fields: [hotelId], references: [id])
  month          DateTime
  electricityKwh Float?
  waterLiters    Float?
  gasUnits       Float?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([month, hotelId])
}

model User {
  id              String     @id @default(cuid())
  email           String     @unique
  password        String
  role            Role
  hotelId         String?
  hotel           Hotel?     @relation(fields: [hotelId], references: [id])
  expensesCreated Expense[]  @relation("UserExpenses")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  SavedForm       SavedForm?
}

model Lead {
  id           String      @id @default(cuid())
  enquiryId    String      @unique //Auto-generated like ENQ-0001
  name         String
  source       String
  staff        String
  status       String      @default("Open")
  contactEmail String? // optional
  contactPhone String? // optional
  notes        String? // optional
  hotelId      String
  hotel        Hotel       @relation(fields: [hotelId], references: [id])
  createdAt    DateTime    @default(now())
  quotations   Quotation[]
}

model Quotation {
  id      String @id @default(cuid())
  leadId  String
  hotelId String

  // Relations
  lead  Lead  @relation(fields: [leadId], references: [id])
  hotel Hotel @relation(fields: [hotelId], references: [id])

  // Guest / Contact Info
  guestName    String
  contactEmail String?
  contactPhone String?
  source       String?

  // Booking Details
  rooms         Json // Array of { roomType, rateType, rate, noOfRooms, checkIn, checkOut, nights }
  inclusions    String?
  exclusions    String?
  discount      String?
  tax           String?
  paymentPolicy String?
  terms         String?
  addons        Json? // [{ name, price }]

  // Status
  status    String   @default("draft") // draft | sent | accepted | rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([leadId, hotelId, id]) // each lead can have multiple quotations, but all linked to the same hotel
}

model ExpenseCategory {
  id        String    @id @default(uuid())
  name      String
  hotelId   String
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
  expenses  Expense[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, hotelId])
}

model Expense {
  id          String          @id @default(uuid())
  date        DateTime
  amount      Float
  paymentMode PaymentMode
  description String?
  receiptUrl  String?
  hotelId     String
  hotel       Hotel           @relation(fields: [hotelId], references: [id])
  categoryId  String
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  createdById String?
  createdBy   User?           @relation("UserExpenses", fields: [createdById], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model SavedForm {
  id             Int      @id @default(autoincrement())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  formData       Json
  currentSection String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId])
}

model StaffUser {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String // e.g. "Front Office", "Housekeeping", "Outlet Manager"
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  managedOutlets Outlet[] // Outlets where this staff user is the manager
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Waiter {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  phone      String?
  employeeId String? // Employee ID for tracking
  isActive  Boolean  @default(true)
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  outletId  String?
  outlet    Outlet?  @relation(fields: [outletId], references: [id])
  tables    Table[]  // Tables assigned to this waiter
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===================== POS Entities =====================

model Customer {
  id           String        @id @default(cuid())
  name         String
  email        String?       @unique
  phone        String?
  hotelId      String
  hotel        Hotel         @relation(fields: [hotelId], references: [id])
  orders       Order[]
  feedbacks    Feedback[]
  reservations Reservation[]
  createdAt    DateTime      @default(now())
}

model Table {
  id        String   @id @default(cuid())
  number    String
  capacity  Int
  areaId    String?
  area      Area?    @relation(fields: [areaId], references: [id])
  waiterId  String?
  waiter    Waiter?  @relation(fields: [waiterId], references: [id])
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  outletId  String?
  outlet    Outlet?  @relation(fields: [outletId], references: [id])
  orders    Order[]
  status    String   @default("AVAILABLE") // AVAILABLE, OCCUPIED, RESERVED
}

model Area {
  id        String   @id @default(cuid())
  name      String
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  outletId  String?
  outlet    Outlet?  @relation(fields: [outletId], references: [id])
  tables    Table[]
}

model Order {
  id           String       @id @default(cuid())
  orderNumber  String       @unique // Auto-generated order number
  type         String       // dine-in, takeaway, delivery
  status       String       @default("PENDING") // PENDING, CONFIRMED, PREPARING, READY, COMPLETED, CANCELLED
  hotelId      String
  hotel        Hotel        @relation(fields: [hotelId], references: [id])
  outletId     String?
  outlet       Outlet?      @relation(fields: [outletId], references: [id])
  customerId   String?
  customer     Customer?    @relation(fields: [customerId], references: [id])
  tableId      String?
  table        Table?       @relation(fields: [tableId], references: [id])
  orderItems   OrderItem[]
  bills        Bill[]
  payments     Payment[]
  discounts    Discount[]
  kitchenOrders KitchenOrder[]
  orderSplits   OrderSplit[]
  notes         String?
  estimatedTime Int? // minutes
  actualTime    Int? // minutes
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id])
  itemId    String
  item      MenuItem        @relation(fields: [itemId], references: [id])
  quantity  Int             @default(1)
  notes     String? // modifiers like "extra cheese", "no onion"
  price     Float
  modifiers OrderModifier[]
  createdAt DateTime        @default(now())
}

model Bill {
  id            String   @id @default(cuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id])
  total         Float
  tax           Float?
  serviceCharge Float?
  discount      Float?
  finalAmount   Float
  createdAt     DateTime @default(now())
}

model Payment {
  id        String      @id @default(cuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id])
  mode      PaymentMode
  amount    Float
  status    String      @default("SUCCESS") // SUCCESS, FAILED, PENDING
  createdAt DateTime    @default(now())
}

model Discount {
  id        String    @id @default(cuid())
  code      String?
  type      String // PERCENTAGE or FLAT
  value     Float
  orderId   String?
  order     Order?    @relation(fields: [orderId], references: [id])
  validFrom DateTime?
  validTo   DateTime?
}

model InventoryItem {
  id        String   @id @default(cuid())
  name      String
  quantity  Float
  unit      String
  threshold Float?
  costPrice Float?
  hotelId   String
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
  outletId  String?
  outlet    Outlet?   @relation(fields: [outletId], references: [id])
  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  transactions InventoryTransaction[]
  purchaseOrders PurchaseOrder[]
  recipeItems RecipeItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  contact   String?
  email     String?
  address   String?
  phone     String?
  category  SupplierCategory @default(MAIN)
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  outletId  String?
  outlet    Outlet?  @relation(fields: [outletId], references: [id])
  items     InventoryItem[]
  purchaseOrders PurchaseOrder[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Outlet {
  id              String   @id @default(cuid())
  name            String
  description     String?
  location        String
  address         String?
  phone           String?
  email           String?
  operatingHours  Json?    // { monday: { open: "09:00", close: "22:00", closed: false }, ... }
  outletType      String   @default("RESTAURANT") // RESTAURANT, BAR, CAFE, FAST_FOOD, etc.
  isActive        Boolean  @default(true)
  hotelId         String
  hotel           Hotel    @relation(fields: [hotelId], references: [id])
  managerId       String?  // Staff user assigned as outlet manager
  manager         StaffUser? @relation(fields: [managerId], references: [id])
  
  // Relations to existing entities
  tables          Table[]
  areas           Area[]
  waiters         Waiter[]
  orders          Order[]
  menuCategories  MenuCategory[]
  menuItems       MenuItem[]
  menuModifiers   MenuModifier[]
  comboItems      ComboItem[]
  inventoryItems  InventoryItem[]
  suppliers       Supplier[]
  kitchenOrders   KitchenOrder[]
  kitchenDisplays KitchenDisplay[]
  coupons         Coupon[]
  queueEntries    QueueEntry[]
  thirdPartyOrders ThirdPartyOrder[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([name, hotelId])
}

model Recipe {
  id          String   @id @default(cuid())
  menuItemId  String   @unique
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  steps       String?
  items       RecipeItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RecipeItem {
  id               String   @id @default(cuid())
  recipeId         String
  recipe           Recipe   @relation(fields: [recipeId], references: [id])
  inventoryItemId  String
  inventoryItem    InventoryItem @relation(fields: [inventoryItemId], references: [id])
  quantity         Float
  unit             String?
}

model Report {
  id        String   @id @default(cuid())
  type      String // sales, inventory, revenue
  data      Json
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  read      Boolean  @default(false)
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  createdAt DateTime @default(now())
}

model Device {
  id         String   @id @default(cuid())
  type       String // POS terminal, KDS screen, printer
  identifier String
  hotelId    String
  hotel      Hotel    @relation(fields: [hotelId], references: [id])
  createdAt  DateTime @default(now())
}

model OnlineOrder {
  id        String   @id @default(cuid())
  platform  String // Swiggy, Zomato, UberEats
  orderId   String
  status    String
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  createdAt DateTime @default(now())
}

model Feedback {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  hotelId    String
  hotel      Hotel    @relation(fields: [hotelId], references: [id])
  createdAt  DateTime @default(now())
}

// ===================== Enhanced POS Entities =====================

model MenuCategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  image       String?
  sortOrder   Int        @default(0)
  isActive    Boolean    @default(true)
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  outletId    String?
  outlet      Outlet?  @relation(fields: [outletId], references: [id])
  menuItems   MenuItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, hotelId, outletId])
}

model MenuItem {
  id              String        @id @default(cuid())
  name            String
  description     String?
  basePrice       Float
  categoryId      String
  category        MenuCategory  @relation(fields: [categoryId], references: [id])
  hotelId         String
  hotel           Hotel         @relation(fields: [hotelId], references: [id])
  outletId        String?
  outlet          Outlet?       @relation(fields: [outletId], references: [id])
  images          MenuItemImage[]
  modifiers       MenuModifier[]
  code            String?
  numCode         Int?  
  combos          ComboItem[]
  isAvailable     Boolean       @default(true)
  prepTime        Int           @default(15) // minutes
  spiceLevel      String        @default("Mild")
  allergens       String[]
  vegetarian      Boolean       @default(false)
  calories        Int?
  sortOrder       Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orderItems      OrderItem[]
  recipe          Recipe?

  @@unique([name, categoryId])
}

model MenuItemImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  itemId    String
  item      MenuItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model MenuModifier {
  id          String   @id @default(cuid())
  name        String
  price       Float
  type        String   // ADDON, SUBSTITUTION, REMOVAL
  isRequired  Boolean  @default(false)
  itemId      String
  item        MenuItem @relation(fields: [itemId], references: [id])
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  outletId    String?
  outlet      Outlet?  @relation(fields: [outletId], references: [id])
  orderModifiers OrderModifier[]
  createdAt      DateTime        @default(now())
}

model ComboItem {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  items       Json // Array of { itemId, quantity }
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  outletId    String?
  outlet      Outlet?  @relation(fields: [outletId], references: [id])
  menuItems   MenuItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model OrderModifier {
  id          String       @id @default(cuid())
  modifierId  String
  modifier    MenuModifier @relation(fields: [modifierId], references: [id])
  orderItemId String
  orderItem   OrderItem    @relation(fields: [orderItemId], references: [id])
  createdAt   DateTime     @default(now())
}

model KitchenOrder {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  outletId    String?
  outlet      Outlet?  @relation(fields: [outletId], references: [id])
  status      String   @default("PENDING") // PENDING, PREPARING, READY, SERVED
  priority    String   @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  estimatedTime Int?   // minutes
  actualTime  Int?     // minutes
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderSplit {
  id           String   @id @default(cuid())
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id])
  hotelId      String
  hotel        Hotel    @relation(fields: [hotelId], references: [id])
  items        Json // Array of { itemId, quantity, price }
  total        Float
  customerName String?
  createdAt    DateTime @default(now())
}

model Coupon {
  id             String   @id @default(cuid())
  code           String   @unique
  name           String
  type           String // PERCENTAGE, FLAT, BUY_X_GET_Y
  value          Float
  minOrderAmount Float?
  maxDiscount Float?
  usageLimit  Int?
  usedCount   Int      @default(0)
  validFrom   DateTime
  validTo     DateTime
  isActive    Boolean  @default(true)
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  outletId    String?
  outlet      Outlet?  @relation(fields: [outletId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InventoryTransaction {
  id        String        @id @default(cuid())
  itemId    String
  item      InventoryItem @relation(fields: [itemId], references: [id])
  type      String // IN, OUT, WASTE, ADJUSTMENT
  quantity  Float
  reason    String?
  reference String? // Order ID, Purchase Order ID, etc.
  hotelId   String
  hotel     Hotel         @relation(fields: [hotelId], references: [id])
  createdAt DateTime      @default(now())
}

model PurchaseOrder {
  id              String        @id @default(cuid())
  supplierId      String
  supplier        Supplier      @relation(fields: [supplierId], references: [id])
  inventoryItemId String
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  items           Json // Array of { itemId, quantity, unitPrice }
  totalAmount     Float
  status          String        @default("PENDING") // PENDING, CONFIRMED, DELIVERED, CANCELLED
  expectedDate    DateTime?
  deliveredDate   DateTime?
  notes           String?
  hotelId         String
  hotel           Hotel         @relation(fields: [hotelId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model KitchenDisplay {
  id          String   @id @default(cuid())
  name        String
  location    String
  isActive    Boolean  @default(true)
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  outletId    String?
  outlet      Outlet?  @relation(fields: [outletId], references: [id])
  createdAt   DateTime @default(now())
}

model QueueEntry {
  id          String   @id @default(cuid())
  customerName String
  phone       String?
  partySize   Int
  estimatedWait Int?   // minutes
  status      String   @default("WAITING") // WAITING, SEATED, CANCELLED
  notes       String?
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  outletId    String?
  outlet      Outlet?  @relation(fields: [outletId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ThirdPartyOrder {
  id          String   @id @default(cuid())
  platform    String   // SWIGGY, ZOMATO, UBER_EATS, etc.
  externalOrderId String
  status      String   @default("PENDING")
  orderData   Json     // Full order data from platform
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  outletId    String?
  outlet      Outlet?  @relation(fields: [outletId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([platform, externalOrderId])
}

model TaxConfiguration {
  id              String   @id @default(cuid())
  platform        String // SWIGGY, ZOMATO, UBER_EATS, etc.
  externalOrderId String
  status          String   @default("PENDING")
  orderData       Json // Full order data from platform
  hotelId         String
  hotel           Hotel    @relation(fields: [hotelId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([platform, externalOrderId])
}

model TaxConfiguration {
  id          String   @id @default(cuid())
  name        String
  type        String // GST, VAT, SERVICE_CHARGE
  rate        Float
  isInclusive Boolean  @default(false)
  isActive    Boolean  @default(true)
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ReceiptTemplate {
  id        String   @id @default(cuid())
  name      String
  template  Json // Receipt template configuration
  isDefault Boolean  @default(false)
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  MAINTENANCE
}

enum Role {
  SUPERADMIN
  HOTELADMIN
  FRONTOFFICE
  MARKETING
  SALES
  CHIEF
  WAITER
  RESTAURANTMANAGER
}

enum PaymentMode {
  CASH
  CARD
  UPI
  BANK
  OTHER
}

enum SupplierCategory {
  MAIN
  SECONDARY
  EMERGENCY
}

enum CleaningStatus {
  CLEANED
  CLEANING
  EMERGENCY_CLEANING
  MAINTENANCE
}

enum IssueType {
  ELECTRICAL
  PLUMBING
  HVAC
  FURNITURE
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}
